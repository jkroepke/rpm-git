From fcb36ce667da15e06cd836ef08d5c9cb6679c361 Mon Sep 17 00:00:00 2001
From: Peter Hunt <pehunt@redhat.com>
Date: Mon, 6 Apr 2020 15:41:46 -0400
Subject: [PATCH] oci: handle timeouts correctly for probes

Signed-off-by: Peter Hunt <pehunt@redhat.com>
---
 oci/oci.go | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/oci/oci.go b/oci/oci.go
index 7d647d5339..fce4abefa6 100644
--- cri-o-6d43aae009411bc6dec1fd6242769ee0f998216f/oci/oci.go
+++ cri-o-6d43aae009411bc6dec1fd6242769ee0f998216f/oci/oci.go
@@ -477,6 +477,19 @@ func (r *Runtime) ExecSync(c *Container, command []string, timeout int64) (resp
 
 	logrus.Debugf("Received container exit code: %v, message: %s", ec.ExitCode, ec.Message)
 
+
+	// When we timeout the command in conmon then we should return
+	// an ExecSyncResponse with a non-zero exit code because
+	// the prober code in the kubelet checks for it. If we return
+	// a custom error, then the probes transition into Unknown status
+	// and the container isn't restarted as expected.
+	if ec.ExitCode == -1 && ec.Message == "command timed out" {
+		return &ExecSyncResponse{
+			Stderr:   []byte(ec.Message),
+			ExitCode: -1,
+		}, nil
+	}
+
 	if ec.ExitCode == -1 {
 		return nil, ExecSyncError{
 			Stdout:   stdoutBuf,
